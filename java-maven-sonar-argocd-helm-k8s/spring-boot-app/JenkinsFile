pipeline {
    agent {
        docker { image 'abhishekf5/maven-abhishek-docker-agent:v1'
                 args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
               }
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/asim0196/Jenkins-Zero-To-Hero.git'
            }
        }
        stage('Build and Test') {
            steps {
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean install'
                
            }
       }
       stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://13.127.219.194:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Docker build and Push ') {
            steps {
                script {
                   withDockerRegistry(credentialsId: 'dockerhub-cred') {
                     sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t aasim113322/argo-app:${BUILD_NUMBER} .'
                     sh 'docker push aasim113322/argo-app:${BUILD_NUMBER}'
                   }
                }
                
            }
       }
       stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "argo-manifest"
            GIT_USER_NAME = "asim0196"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                     git config --global user.email "asim@example.com"
                     git config --global user.name "asim shaikh"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    rm -rf argo-manifest
                    git clone https://github.com/asim0196/argo-manifest.git
                    cd argo-manifest && bash build.sh
                    git add .
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
    
}




